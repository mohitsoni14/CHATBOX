import React, { useState, useRef, useCallback, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { X } from 'lucide-react';
import ChatbotOverlay from './ChatbotOverlay';
import MessageInput from './message-input/MessageInput';
import Toolbar from './toolbar/Toolbar';
import CameraInterface from './camera/CameraInterface';
import EmojiPickerComponent from './emoji/EmojiPickerComponent';
import FileUploadComponent from './file-upload/FileUploadComponent';

interface MessageData {
  id: string;
  text: string;
  sender: string;
  senderName?: string;
  timestamp: Date;
  type: 'text' | 'image' | 'file';
  fileName?: string;
  fileSize?: number;
  fileType?: string;
  fileData?: any;
  fileDataObj?: {
    name: string;
    type: string;
    size: number;
    lastModified: number;
    data: File;
  };
  isStored?: boolean;
  isBotTyping?: boolean;
}

interface InputAreaProps {
  onSendMessage: (message: MessageData) => void;
  onOpenChatbot: () => void;
  isConnected?: boolean;
}

const storeImageData = (id: string, dataUrl: string) => {
  try {
    const storedImages = JSON.parse(localStorage.getItem('chatImages') || '[]');
    const newImage = { id, dataUrl };
    const recentImages = [...storedImages, newImage].slice(-50);
    localStorage.setItem('chatImages', JSON.stringify(recentImages));
  } catch (error) {
    console.error('Error storing image data:', error);
  }
};

const InputArea: React.FC<InputAreaProps> = ({
  onSendMessage,
  onOpenChatbot,
  isConnected = true
}) => {
  const [showCamera, setShowCamera] = useState(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [message, setMessage] = useState('');
  const [isFocused, setIsFocused] = useState(false);
  const navigate = useNavigate();
  const inputRef = useRef<HTMLInputElement>(null);
  const emojiPickerRef = useRef<HTMLDivElement>(null);
  const sendButtonRef = useRef<HTMLButtonElement>(null);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);

  // Check if mobile view
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 768);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const handleImageCapture = useCallback(async (data: { url: string, blob: Blob, dataUrl: string }) => {
    const messageId = Date.now().toString();
    storeImageData(messageId, data.dataUrl);
    
    onSendMessage({
      id: messageId,
      text: data.dataUrl,
      sender: 'user',
      timestamp: new Date(),
      type: 'image',
      fileData: data.blob,
      isStored: true,
      fileType: 'image/jpeg'
    });
    
    setShowCamera(false);
  }, [onSendMessage]);
  
  const handleFileSelect = useCallback((file: File) => {
    const messageId = Date.now().toString();
    const reader = new FileReader();
    
    reader.onload = () => {
      if (reader.result) {
        const base64Data = reader.result.toString();
        
        if (file.type.startsWith('image/')) {
          storeImageData(messageId, base64Data);
          
          onSendMessage({
            id: messageId,
            text: base64Data,
            sender: 'user',
            timestamp: new Date(),
            type: 'image',
            fileData: file,
            isStored: true,
            fileType: file.type,
            fileName: file.name,
            fileSize: file.size
          });
        } else {
          onSendMessage({
            id: messageId,
            text: file.name,
            sender: 'user',
            timestamp: new Date(),
            type: 'file',
            fileData: file,
            fileName: file.name,
            fileSize: file.size,
            fileType: file.type
          });
        }
      }
    };
    
    reader.readAsDataURL(file);
  }, [onSendMessage]);
  
  const handleEmojiClick = useCallback((emoji: string) => {
    setMessage(prev => prev + emoji);
    setShowEmojiPicker(false);
    inputRef.current?.focus();
  }, []);

  const handleCameraClick = useCallback(() => {
    setShowCamera(true);  
  }, []);
  
  const handleEmojiButtonClick = useCallback(() => {
    setShowEmojiPicker(prev => !prev);
  }, []);
  
  const handleVoiceClick = useCallback(() => {
    console.log('Voice message recording started');
  }, []);
  
  const handleSendMessage = useCallback(() => {
    if (message.trim()) {
      onSendMessage({
        id: Date.now().toString(),
        text: message,
        sender: 'user',
        timestamp: new Date(),
        type: 'text'
      });
      setMessage('');
    }
  }, [message, onSendMessage]);

  // Handle click outside to close emoji picker
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target as Node)) {
        setShowEmojiPicker(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Handle keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        if (message.trim()) {
          handleSendMessage();
        }
      }
    };

    const input = inputRef.current;
    if (input) {
      input.addEventListener('keydown', handleKeyDown);
    }

    return () => {
      if (input) {
        input.removeEventListener('keydown', handleKeyDown);
      }
    };
  }, [message, handleSendMessage]);

  return (
    <div className="input-area-container">
      <Toolbar
        onCameraClick={handleCameraClick}
        onMicClick={handleVoiceClick}
        onAttachmentClick={() => document.getElementById('file-upload')?.click()}
        onEmojiClick={handleEmojiButtonClick}
        onBotClick={onOpenChatbot}
        isConnected={isConnected}
      />
      
      <div className="input-wrapper">
        <MessageInput
          value={message}
          onChange={setMessage}
          onSend={handleSendMessage}
          onEmojiClick={handleEmojiButtonClick}
          onFileClick={() => document.getElementById('file-upload')?.click()}
          onCameraClick={handleCameraClick}
          onVoiceClick={handleVoiceClick}
          placeholder="Type a message..."
          disabled={!isConnected}
          inputRef={inputRef}
        />
        
        <FileUploadComponent
          onFileSelect={handleFileSelect}
          accept="*/*"
          multiple={false}
        >
          <div id="file-upload" style={{ display: 'none' }} />
        </FileUploadComponent>
        
        {showEmojiPicker && (
          <div ref={emojiPickerRef}>
            <EmojiPickerComponent
              onEmojiClick={handleEmojiClick}
              onClose={() => setShowEmojiPicker(false)}
            />
          </div>
        )}
      </div>
      
      {showCamera && (
        <div className="camera-overlay">
          <button 
            className="close-camera" 
            onClick={() => setShowCamera(false)}
            aria-label="Close camera"
          >
            <X size={24} />
          </button>
          <CameraInterface 
            onCapture={handleImageCapture}
            onClose={() => setShowCamera(false)}
          />
        </div>
      )}
      
      <ChatbotOverlay isOpen={false} onClose={onOpenChatbot} />
    </div>
  );
};

export default InputArea;
